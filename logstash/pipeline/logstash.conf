input { 
    http { 
        #host => "XXX.XXX.XXX.XXX"
        #port => 80  will be 8080 (default value)
        ssl => false
        additional_codecs => {
            "application/json" => "json"
        }
        response_headers => {
            "Access-Control-Allow-Origin" => "*"
            "Content-Type" => "text/plain"
            "Access-Control-Allow-Headers" => "Origin, X-Requested-With, Content-Type, Accept"
        }
        ecs_compatibility => disabled
    }
}

filter {
    
    geoip {
        source => "[headers][x_real_ip]"
        ecs_compatibility => disabled
        target => "geoip"
        remove_field => ["[geoip][continent_code]", "[geoip][country_code2]", "[geoip][country_code3]", "[geoip][dma_code]", "[geoip][postal_code]", "[geoip][region_code]","[geoip][latitude]", "[geoip][longitude]", "[geoip][city_name]" ] 
    }

    useragent {
        source => "[headers][http_user_agent]"
        ecs_compatibility => disabled
        remove_field => ["build", "minor", "major", "os_major", "os_name",  "os_minor", "os_full", "os_version", "version",  "patch", "timezone"]
    }

    if [utm] != "" {
        grok {
            match => { "utm" => ["%{DATA}utm_source=%{DATA:utm_source}&%{GREEDYDATA}", "%{DATA}utm_source=%{GREEDYDATA:utm_source}"] }
            named_captures_only => true
        }
        grok {
            match => { "utm" => ["%{DATA}utm_medium=%{DATA:utm_medium}&%{GREEDYDATA}", "%{DATA}utm_medium=%{GREEDYDATA:utm_medium}"] }
            named_captures_only => true
        }
        grok {
            match => { "utm" => ["%{DATA}utm_campaign=%{DATA:utm_campaign}&%{GREEDYDATA}", "%{DATA}utm_campaign=%{GREEDYDATA:utm_campaign}"] }
            named_captures_only => true
        }
    }

    mutate {
        add_field => { "salt" => "${FAIRLYTICS_SALT}" }
    }

    ruby {
        code => 'event.set("today", Time.now.day )'
    }

    # Création d'un identifiant indéchiffrable de visiteur unique, qui change tous les jours
    fingerprint {
        source => ["[headers][x_real_ip]", "hostname", "salt", "today" ]
        method => "SHA256"
        target => "unique_visitor"
        concatenate_sources => true
        remove_field => ["host", "[geoip][ip]", "salt", "today"]
    }

    # Creation des sessions
    aggregate {
        task_id => "%{unique_visitor}"
        code => "map['session_id'] ||= Time.now.to_i; event.set('session_id', map['session_id']);"
        push_map_as_event_on_timeout => true
        timeout => 3600 # timeout even if user is still connected = 1h
        inactivity_timeout => "${SESSION_DURATION}" # Session closed after xx seconds of inactivity
    }
    fingerprint {
        source => ["unique_visitor", "session_id"]
        method => "SHA256"
        target => "session"
        concatenate_sources => true
        remove_field => ["session_id"]
    }

    # On vire tous les champs headers..
    prune {
        blacklist_names => ["headers", "event", "tags" ]
    }

    # On vire les enregistrements sans hostname renseigné
    if !([hostname]) {
        drop { }
    }
    # On vire les hits des bots
    if [name] =~ /GoogleBot|AdsBot|AhrefsBot|Applebot|HeadlessChrome|Baiduspider|PetalBot/ {
     drop { }
    }
}


output {
	#stdout { codec => rubydebug }
    elasticsearch {
		hosts => ["https://elasticsearch:9200"]
        cacert => "/usr/share/logstash/config/http_ca.crt"
        ssl_certificate_verification => false
		user => "elastic"
		password => "${ELASTIC_PASSWORD}"
		index => "fairlytics"
        ecs_compatibility => disabled
	}
}

